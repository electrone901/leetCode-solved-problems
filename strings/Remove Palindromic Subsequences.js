/*
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.


Example 1:
Input: s = "ababa"
Output: 1
Explanation: String is already palindrome

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

Example 4:
Input: s = ""
Output: 0

PSEUDO CODE:
This problem has only 3 possible outcomes.
0 (if empty)
1 (if palindrome)
2 (if not palindrome)

The outcome of this problem is not beyond 2 because,
if the string is not a palindrome then in the first step we can remove all the a's and
in the second step we can remove all the b's since the string consists of only a's and b's


TIME COMPLEXITY: O(n)
*/

var removePalindromeSub = function(s) {
    if(s.length == 0) return 0;
    else if(isPalindrome(s)) return 1;
    else { return 2 }
}

function isPalindrome(s) {
    let start = 0;
    let end = s.length-1;

    while(start < end) {
        if(s[start] != s[end]) return false;
        start++;
        end--;
    }
    return true;
}

removePalindromeSub("ababa"); //Output: 1